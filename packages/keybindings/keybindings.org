#+TITLE: Keybindings
#+AUTHOR: oxcl
#+PROPERTY: header-args :tangle yes

* TLDR
Replace emacs garbage default keybindings with more modern and conventional key bindings.

* Description
Emacs default keybindings are very different from conventinoal keybindings used in most modern programs and code editors.
This packages tries to teach emacs to be normal and get along with the rest of the world.
It tries to achieve this by replacing the awkard default emacs keybindings using the builtin cua-mode but also expanding on it with more keybindings
I also try to unset the original keybindings to prevent myself from accidentally hitting them and unclutter the which-key window

* Config
#+BEGIN_SRC elisp
  (use-package keybindings
    :ensure nil
    :no-require
    :demand t
    :config
#+END_SRC
** ~ESC~ for Quit instead of ~C-g~
Turns out vim does it better.
#+BEGIN_SRC elisp
  ;; the following code snippet is used to enable the <escape> key to be recognized by terminal environments
  ;; taken from: https://github.com/emacsorphanage/god-mode/issues/43#issuecomment-67193877
  (defvar oxcl/fast-keyseq-timeout 50) ; this timeout determines if a ESC is a Alt combination or a single <escape>
  (defun oxcl/-tty-ESC-filter (map)
    (if (and (equal (this-single-command-keys) [?\e])
	     (sit-for (/ oxcl/fast-keyseq-timeout 1000.0)))
	[?\C-g] map)) ; i replaced [escape] with [?\C-g] because i want to swap them

  (defun oxcl/-lookup-key (map key)
    (catch 'found
      (map-keymap (lambda (k b) (if (equal key k) (throw 'found b))) map)))

  (defun oxcl/catch-tty-ESC ()
    "Setup key mappings of current terminal to turn a tty's ESC into `escape'."
    (when (memq (terminal-live-p (frame-terminal)) '(t pc))
      (let ((esc-binding (oxcl/-lookup-key input-decode-map ?\e)))
	(define-key input-decode-map
		    [?\e] `(menu-item "" ,esc-binding :filter oxcl/-tty-ESC-filter)))))  
  (oxcl/catch-tty-ESC)

  ;; swap <escape> and Ctrl-g because Ctrl-g is just too good for just quit and ESC is just too good to not be used at all
  ;; so in key bindings <escape> will actually become C-g
  ;; meaning if you want to bound someting to C-g you have to use <escape>
  (define-key input-decode-map [?\C-g] [escape] )
  (define-key input-decode-map [escape] [?\C-g] )
#+END_SRC
** End
#+BEGIN_SRC elisp
  )
#+END_SRC
